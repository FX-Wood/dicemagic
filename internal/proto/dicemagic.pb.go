// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dicemagic.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the command. Input validation preformed on the server side.
type RollRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Probabilities        bool     `protobuf:"varint,2,opt,name=probabilities,proto3" json:"probabilities,omitempty"`
	Chart                bool     `protobuf:"varint,3,opt,name=chart,proto3" json:"chart,omitempty"`
	RootOnly             bool     `protobuf:"varint,4,opt,name=rootOnly,proto3" json:"rootOnly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollRequest) Reset()         { *m = RollRequest{} }
func (m *RollRequest) String() string { return proto.CompactTextString(m) }
func (*RollRequest) ProtoMessage()    {}
func (*RollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_63ba8fa741f5f7d8, []int{0}
}

func (m *RollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollRequest.Unmarshal(m, b)
}
func (m *RollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollRequest.Marshal(b, m, deterministic)
}
func (m *RollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollRequest.Merge(m, src)
}
func (m *RollRequest) XXX_Size() int {
	return xxx_messageInfo_RollRequest.Size(m)
}
func (m *RollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RollRequest proto.InternalMessageInfo

func (m *RollRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *RollRequest) GetProbabilities() bool {
	if m != nil {
		return m.Probabilities
	}
	return false
}

func (m *RollRequest) GetChart() bool {
	if m != nil {
		return m.Chart
	}
	return false
}

func (m *RollRequest) GetRootOnly() bool {
	if m != nil {
		return m.RootOnly
	}
	return false
}

// The response message containing one DiceSet. If the command warrents multiple dice-sets, they will be merged
type RollResponse struct {
	Cmd                  string     `protobuf:"bytes,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	DiceSet              *DiceSet   `protobuf:"bytes,2,opt,name=DiceSet,proto3" json:"DiceSet,omitempty"`
	DiceSets             []*DiceSet `protobuf:"bytes,3,rep,name=DiceSets,proto3" json:"DiceSets,omitempty"`
	Ok                   bool       `protobuf:"varint,4,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Error                *RollError `protobuf:"bytes,5,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RollResponse) Reset()         { *m = RollResponse{} }
func (m *RollResponse) String() string { return proto.CompactTextString(m) }
func (*RollResponse) ProtoMessage()    {}
func (*RollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_63ba8fa741f5f7d8, []int{1}
}

func (m *RollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollResponse.Unmarshal(m, b)
}
func (m *RollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollResponse.Marshal(b, m, deterministic)
}
func (m *RollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollResponse.Merge(m, src)
}
func (m *RollResponse) XXX_Size() int {
	return xxx_messageInfo_RollResponse.Size(m)
}
func (m *RollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RollResponse proto.InternalMessageInfo

func (m *RollResponse) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *RollResponse) GetDiceSet() *DiceSet {
	if m != nil {
		return m.DiceSet
	}
	return nil
}

func (m *RollResponse) GetDiceSets() []*DiceSet {
	if m != nil {
		return m.DiceSets
	}
	return nil
}

func (m *RollResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RollResponse) GetError() *RollError {
	if m != nil {
		return m.Error
	}
	return nil
}

type Dice struct {
	Count                int64             `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Sides                int64             `protobuf:"varint,2,opt,name=Sides,proto3" json:"Sides,omitempty"`
	Total                int64             `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Faces                []int64           `protobuf:"varint,4,rep,packed,name=Faces,proto3" json:"Faces,omitempty"`
	Color                string            `protobuf:"bytes,5,opt,name=Color,proto3" json:"Color,omitempty"`
	Max                  int64             `protobuf:"varint,6,opt,name=Max,proto3" json:"Max,omitempty"`
	Min                  int64             `protobuf:"varint,7,opt,name=Min,proto3" json:"Min,omitempty"`
	DropHighest          int64             `protobuf:"varint,8,opt,name=DropHighest,proto3" json:"DropHighest,omitempty"`
	DropLowest           int64             `protobuf:"varint,9,opt,name=DropLowest,proto3" json:"DropLowest,omitempty"`
	Chart                []byte            `protobuf:"bytes,10,opt,name=Chart,proto3" json:"Chart,omitempty"`
	Probabilities        map[int64]float64 `protobuf:"bytes,11,rep,name=Probabilities,proto3" json:"Probabilities,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	ExpectedValue        float64           `protobuf:"fixed64,12,opt,name=ExpectedValue,proto3" json:"ExpectedValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Dice) Reset()         { *m = Dice{} }
func (m *Dice) String() string { return proto.CompactTextString(m) }
func (*Dice) ProtoMessage()    {}
func (*Dice) Descriptor() ([]byte, []int) {
	return fileDescriptor_63ba8fa741f5f7d8, []int{2}
}

func (m *Dice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dice.Unmarshal(m, b)
}
func (m *Dice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dice.Marshal(b, m, deterministic)
}
func (m *Dice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dice.Merge(m, src)
}
func (m *Dice) XXX_Size() int {
	return xxx_messageInfo_Dice.Size(m)
}
func (m *Dice) XXX_DiscardUnknown() {
	xxx_messageInfo_Dice.DiscardUnknown(m)
}

var xxx_messageInfo_Dice proto.InternalMessageInfo

func (m *Dice) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Dice) GetSides() int64 {
	if m != nil {
		return m.Sides
	}
	return 0
}

func (m *Dice) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Dice) GetFaces() []int64 {
	if m != nil {
		return m.Faces
	}
	return nil
}

func (m *Dice) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Dice) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *Dice) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Dice) GetDropHighest() int64 {
	if m != nil {
		return m.DropHighest
	}
	return 0
}

func (m *Dice) GetDropLowest() int64 {
	if m != nil {
		return m.DropLowest
	}
	return 0
}

func (m *Dice) GetChart() []byte {
	if m != nil {
		return m.Chart
	}
	return nil
}

func (m *Dice) GetProbabilities() map[int64]float64 {
	if m != nil {
		return m.Probabilities
	}
	return nil
}

func (m *Dice) GetExpectedValue() float64 {
	if m != nil {
		return m.ExpectedValue
	}
	return 0
}

type DiceSet struct {
	Dice                 []*Dice            `protobuf:"bytes,1,rep,name=Dice,proto3" json:"Dice,omitempty"`
	TotalsByColor        map[string]float64 `protobuf:"bytes,2,rep,name=TotalsByColor,proto3" json:"TotalsByColor,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Total                int64              `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	ReString             string             `protobuf:"bytes,4,opt,name=ReString,proto3" json:"ReString,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DiceSet) Reset()         { *m = DiceSet{} }
func (m *DiceSet) String() string { return proto.CompactTextString(m) }
func (*DiceSet) ProtoMessage()    {}
func (*DiceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_63ba8fa741f5f7d8, []int{3}
}

func (m *DiceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiceSet.Unmarshal(m, b)
}
func (m *DiceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiceSet.Marshal(b, m, deterministic)
}
func (m *DiceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiceSet.Merge(m, src)
}
func (m *DiceSet) XXX_Size() int {
	return xxx_messageInfo_DiceSet.Size(m)
}
func (m *DiceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_DiceSet.DiscardUnknown(m)
}

var xxx_messageInfo_DiceSet proto.InternalMessageInfo

func (m *DiceSet) GetDice() []*Dice {
	if m != nil {
		return m.Dice
	}
	return nil
}

func (m *DiceSet) GetTotalsByColor() map[string]float64 {
	if m != nil {
		return m.TotalsByColor
	}
	return nil
}

func (m *DiceSet) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *DiceSet) GetReString() string {
	if m != nil {
		return m.ReString
	}
	return ""
}

type DiceSets struct {
	DiceSet              []*DiceSet `protobuf:"bytes,1,rep,name=DiceSet,proto3" json:"DiceSet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DiceSets) Reset()         { *m = DiceSets{} }
func (m *DiceSets) String() string { return proto.CompactTextString(m) }
func (*DiceSets) ProtoMessage()    {}
func (*DiceSets) Descriptor() ([]byte, []int) {
	return fileDescriptor_63ba8fa741f5f7d8, []int{4}
}

func (m *DiceSets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiceSets.Unmarshal(m, b)
}
func (m *DiceSets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiceSets.Marshal(b, m, deterministic)
}
func (m *DiceSets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiceSets.Merge(m, src)
}
func (m *DiceSets) XXX_Size() int {
	return xxx_messageInfo_DiceSets.Size(m)
}
func (m *DiceSets) XXX_DiscardUnknown() {
	xxx_messageInfo_DiceSets.DiscardUnknown(m)
}

var xxx_messageInfo_DiceSets proto.InternalMessageInfo

func (m *DiceSets) GetDiceSet() []*DiceSet {
	if m != nil {
		return m.DiceSet
	}
	return nil
}

type RollError struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollError) Reset()         { *m = RollError{} }
func (m *RollError) String() string { return proto.CompactTextString(m) }
func (*RollError) ProtoMessage()    {}
func (*RollError) Descriptor() ([]byte, []int) {
	return fileDescriptor_63ba8fa741f5f7d8, []int{5}
}

func (m *RollError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollError.Unmarshal(m, b)
}
func (m *RollError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollError.Marshal(b, m, deterministic)
}
func (m *RollError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollError.Merge(m, src)
}
func (m *RollError) XXX_Size() int {
	return xxx_messageInfo_RollError.Size(m)
}
func (m *RollError) XXX_DiscardUnknown() {
	xxx_messageInfo_RollError.DiscardUnknown(m)
}

var xxx_messageInfo_RollError proto.InternalMessageInfo

func (m *RollError) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RollError) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*RollRequest)(nil), "proto.RollRequest")
	proto.RegisterType((*RollResponse)(nil), "proto.RollResponse")
	proto.RegisterType((*Dice)(nil), "proto.Dice")
	proto.RegisterMapType((map[int64]float64)(nil), "proto.Dice.ProbabilitiesEntry")
	proto.RegisterType((*DiceSet)(nil), "proto.DiceSet")
	proto.RegisterMapType((map[string]float64)(nil), "proto.DiceSet.TotalsByColorEntry")
	proto.RegisterType((*DiceSets)(nil), "proto.DiceSets")
	proto.RegisterType((*RollError)(nil), "proto.RollError")
}

func init() { proto.RegisterFile("dicemagic.proto", fileDescriptor_63ba8fa741f5f7d8) }

var fileDescriptor_63ba8fa741f5f7d8 = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x76, 0x92, 0xc6, 0x93, 0xa4, 0x54, 0x0b, 0x87, 0x55, 0x0e, 0xc5, 0x58, 0x08, 0x45,
	0x1c, 0x22, 0xb5, 0x70, 0x40, 0x70, 0x41, 0x24, 0x01, 0x0e, 0xa0, 0xa0, 0x0d, 0xe2, 0xee, 0xd8,
	0xab, 0x74, 0x15, 0xc7, 0x1b, 0xd6, 0x1b, 0xda, 0xbc, 0x0c, 0x8f, 0xc0, 0x6b, 0xf1, 0x1a, 0x68,
	0x66, 0x9d, 0xd4, 0x56, 0x8b, 0x38, 0x65, 0xbe, 0x6f, 0x66, 0xe7, 0x9b, 0x3f, 0x07, 0x1e, 0x66,
	0x2a, 0x95, 0x9b, 0x64, 0xa5, 0xd2, 0xf1, 0xd6, 0x68, 0xab, 0x59, 0x9b, 0x7e, 0xe2, 0x6b, 0xe8,
	0x09, 0x9d, 0xe7, 0x42, 0xfe, 0xd8, 0xc9, 0xd2, 0xb2, 0x33, 0x08, 0xd2, 0x4d, 0xc6, 0xbd, 0xc8,
	0x1b, 0x85, 0x02, 0x4d, 0xf6, 0x0c, 0x06, 0x5b, 0xa3, 0x97, 0xc9, 0x52, 0xe5, 0xca, 0x2a, 0x59,
	0x72, 0x3f, 0xf2, 0x46, 0x5d, 0xd1, 0x24, 0xd9, 0x63, 0x68, 0xa7, 0x57, 0x89, 0xb1, 0x3c, 0x20,
	0xaf, 0x03, 0x6c, 0x08, 0x5d, 0xa3, 0xb5, 0x9d, 0x17, 0xf9, 0x9e, 0xb7, 0xc8, 0x71, 0xc4, 0xf1,
	0x6f, 0x0f, 0xfa, 0x4e, 0xb9, 0xdc, 0xea, 0xa2, 0x94, 0x28, 0x3d, 0xb9, 0x95, 0x9e, 0x6c, 0x32,
	0x36, 0x82, 0x93, 0xa9, 0x4a, 0xe5, 0x42, 0x5a, 0x12, 0xed, 0x5d, 0x9e, 0xba, 0xda, 0xc7, 0x15,
	0x2b, 0x0e, 0x6e, 0xf6, 0x02, 0xba, 0x95, 0x59, 0xf2, 0x20, 0x0a, 0xee, 0x09, 0x3d, 0xfa, 0xd9,
	0x29, 0xf8, 0xf3, 0x75, 0x55, 0x8e, 0x3f, 0x5f, 0xb3, 0xe7, 0xd0, 0x9e, 0x19, 0xa3, 0x0d, 0x6f,
	0x93, 0xc6, 0x59, 0xf5, 0x10, 0x6b, 0x23, 0x5e, 0x38, 0x77, 0xfc, 0x2b, 0x80, 0x16, 0x26, 0xc1,
	0x5e, 0x27, 0x7a, 0x57, 0x58, 0x2a, 0x35, 0x10, 0x0e, 0x20, 0xbb, 0x50, 0x59, 0x35, 0x9f, 0x40,
	0x38, 0x80, 0xec, 0x37, 0x6d, 0x93, 0x9c, 0xe6, 0x12, 0x08, 0x07, 0x90, 0xfd, 0x90, 0xa4, 0xb2,
	0xe4, 0xad, 0x28, 0x40, 0x96, 0x80, 0xcb, 0x9b, 0x57, 0x85, 0x84, 0xc2, 0x01, 0x1c, 0xcb, 0x97,
	0xe4, 0x86, 0x77, 0xe8, 0x3d, 0x9a, 0xc4, 0xa8, 0x82, 0x9f, 0x54, 0x8c, 0x2a, 0x58, 0x04, 0xbd,
	0xa9, 0xd1, 0xdb, 0x4f, 0x6a, 0x75, 0x25, 0x4b, 0xcb, 0xbb, 0xe4, 0xa9, 0x53, 0xec, 0x1c, 0x00,
	0xe1, 0x67, 0x7d, 0x8d, 0x01, 0x21, 0x05, 0xd4, 0x18, 0xd2, 0xa6, 0xfd, 0x41, 0xe4, 0x8d, 0xfa,
	0xc2, 0x01, 0x36, 0x85, 0xc1, 0xd7, 0xc6, 0xee, 0x7b, 0x34, 0xdb, 0xf3, 0xda, 0x6c, 0xc7, 0x8d,
	0x80, 0x59, 0x61, 0xcd, 0x5e, 0x34, 0x1f, 0xe1, 0x05, 0xcd, 0x6e, 0xb6, 0x32, 0xb5, 0x32, 0xfb,
	0x9e, 0xe4, 0x3b, 0xc9, 0xfb, 0x91, 0x37, 0xf2, 0x44, 0x93, 0x1c, 0xbe, 0x03, 0x76, 0x37, 0x15,
	0xf6, 0xba, 0x96, 0xfb, 0x6a, 0xd2, 0x68, 0x62, 0xa5, 0x3f, 0x29, 0x8b, 0x4f, 0x59, 0x1c, 0x78,
	0xe3, 0xbf, 0xf6, 0xe2, 0x3f, 0xde, 0xf1, 0x5e, 0xd8, 0x13, 0xb7, 0x2b, 0xee, 0x51, 0xc1, 0xbd,
	0x5a, 0xc1, 0xc2, 0x2d, 0xf1, 0x23, 0x0c, 0x68, 0x17, 0xe5, 0xfb, 0xbd, 0x1b, 0xba, 0x4f, 0x91,
	0x4f, 0x9b, 0x67, 0x33, 0x6e, 0xc4, 0x54, 0xdd, 0x35, 0xb8, 0x7f, 0x6c, 0x78, 0x08, 0x5d, 0x21,
	0x17, 0xd6, 0xa8, 0x62, 0x45, 0xa7, 0x16, 0x8a, 0x23, 0xc6, 0x4e, 0xef, 0xa6, 0xad, 0x77, 0x1a,
	0xfe, 0xaf, 0xd3, 0x57, 0xb7, 0xe7, 0x5e, 0xff, 0x48, 0xbc, 0x7b, 0x2f, 0xff, 0xe0, 0x8e, 0x2f,
	0x20, 0x3c, 0x1e, 0x35, 0xca, 0x6d, 0xca, 0xd5, 0x41, 0x6e, 0x53, 0xae, 0x18, 0x83, 0x56, 0xaa,
	0x33, 0xa7, 0xd6, 0x16, 0x64, 0x5f, 0xbe, 0x85, 0x0e, 0x3e, 0x91, 0x86, 0x5d, 0x40, 0x0b, 0x2d,
	0xc6, 0x6a, 0x9f, 0x47, 0xf5, 0xa7, 0x31, 0x7c, 0xd4, 0xe0, 0xdc, 0xe7, 0x1c, 0x3f, 0x58, 0x76,
	0x88, 0x7d, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0x52, 0x6e, 0x06, 0xc1, 0x7b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RollerClient is the client API for Roller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RollerClient interface {
	// Rolls dice
	Roll(ctx context.Context, in *RollRequest, opts ...grpc.CallOption) (*RollResponse, error)
}

type rollerClient struct {
	cc *grpc.ClientConn
}

func NewRollerClient(cc *grpc.ClientConn) RollerClient {
	return &rollerClient{cc}
}

func (c *rollerClient) Roll(ctx context.Context, in *RollRequest, opts ...grpc.CallOption) (*RollResponse, error) {
	out := new(RollResponse)
	err := c.cc.Invoke(ctx, "/proto.Roller/Roll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RollerServer is the server API for Roller service.
type RollerServer interface {
	// Rolls dice
	Roll(context.Context, *RollRequest) (*RollResponse, error)
}

// UnimplementedRollerServer can be embedded to have forward compatible implementations.
type UnimplementedRollerServer struct {
}

func (*UnimplementedRollerServer) Roll(ctx context.Context, req *RollRequest) (*RollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Roll not implemented")
}

func RegisterRollerServer(s *grpc.Server, srv RollerServer) {
	s.RegisterService(&_Roller_serviceDesc, srv)
}

func _Roller_Roll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollerServer).Roll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Roller/Roll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollerServer).Roll(ctx, req.(*RollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Roller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Roller",
	HandlerType: (*RollerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Roll",
			Handler:    _Roller_Roll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dicemagic.proto",
}
