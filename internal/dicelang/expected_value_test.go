package dicelang

import (
	"testing"
	"fmt"
	"strconv"
	"math"
)

func TestExpectedValue(t *testing.T) {
	type pmf map[int64]float64

	type testCase struct {
		id string
		input pmf 
		output float64
	}
	tests := []testCase {
		{
			id: "1d4",
			input: pmf{
				1: 0.25 * 100, // convert to percentages
				2: 0.25 * 100,
				3: 0.25 * 100,
				4: 0.25 * 100,
			},
			output: float64(2.5),
		},
		{
			id: "2d6",
			input: pmf{
				2:  (float64(1)/36) * 100, 
				3:  (float64(2)/36) * 100,
				4:  (float64(3)/36) * 100,
				5:  (float64(4)/36) * 100,
				6:  (float64(5)/36) * 100,
				7:  (float64(6)/36) * 100,
				8:  (float64(5)/36) * 100,
				9:  (float64(4)/36) * 100,
				10: (float64(3)/36) * 100,
				11: (float64(2)/36) * 100,
				12: (float64(1)/36) * 100,
			},
			output: float64(7),
		},
		{
			id: "8d12 + 4d4",
			input: pmf{
				12:9.08468903755e-10,13:1.09016268451e-8,14:7.08605744929e-8,15:3.30682680967e-7,16:0.00000123642617801,17:0.00000392458566422,18:0.0000109597688549,19:0.0000275883836692,20:0.0000637091072826,21:0.000136779078149,22:0.000275883836692,23:0.000527202674227,24:0.000961094690412,25:0.0016810017885,26:0.00283429216019,27:0.00462502245677,28:0.00732837154305,29:0.0113062080205,30:0.0170229339251,31:0.0250604562944,32:0.0361309130005,33:0.0510856338871,34:0.0709187455738,35:0.09676379922,36:0.129881818708,37:0.171639268454,38:0.223474694432,39:0.286853300727,40:0.363209512499,41:0.453878593706,42:0.560019507202,43:0.682532222255,44:0.821973463145,45:0.978475401195,46:1.15167204699,47:1.34063820126,48:1.54384579751,49:1.75914226591,50:1.98375503931,51:2.21432530468,52:2.44697252619,53:2.67738923124,54:2.90096331217,55:3.1129230615,56:3.30849858141,57:3.48309219074,58:3.63244994387,59:3.75282617263,60:3.84113297486,61:3.89506682774,62:3.91320513981,63:3.89506682774,64:3.84113297486,65:3.75282617263,66:3.63244994387,67:3.48309219074,68:3.30849858141,69:3.1129230615,70:2.90096331217,71:2.67738923124,72:2.44697252619,73:2.21432530468,74:1.98375503931,75:1.75914226591,76:1.54384579751,77:1.34063820126,78:1.15167204699,79:0.978475401195,80:0.821973463145,81:0.682532222255,82:0.560019507202,83:0.453878593706,84:0.363209512499,85:0.286853300727,86:0.223474694432,87:0.171639268454,88:0.129881818708,89:0.09676379922,90:0.0709187455738,91:0.0510856338871,92:0.0361309130005,93:0.0250604562944,94:0.0170229339251,95:0.0113062080205,96:0.00732837154305,97:0.00462502245677,98:0.00283429216019,99:0.0016810017885,100:0.000961094690412,101:0.000527202674227,102:0.000275883836692,103:0.000136779078149,104:0.0000637091072826,105:0.0000275883836692,106:0.0000109597688549,107:0.00000392458566422,108:0.00000123642617801,109:3.30682680967e-7,110:7.08605744929e-8,111:1.09016268451e-8,112:9.08468903755e-10,
			},
			output: float64(62.000000000015326),
		},
	}
	for _, tt := range tests {
		t.Run(tt.id, func(t *testing.T) {
			fmt.Printf("running test %v", tt)
			got := ExpectedValue(tt.input)
			// equality must account for floating point error
			if math.Abs(got - tt.output) > 1e-9 {
				t.Errorf("ExpectedValue(%v) = %v; want %v Â± ", tt.id, strconv.FormatFloat(got, 'f', -1, 64), tt.output)
			}

		})
	}
}